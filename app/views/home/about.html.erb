<% content_for(:header) do %>
  <h1>
    About
    <small><%= back_link %></small>
  </h1>

  <%= about_info %>
<% end %>

<h2>Depending on these</h2>

<p>
  To pull some functions from <strong>FunctionBin</strong> into your application, you can use the
  NPM package <strong>functionbin</strong>.
</p>

<pre><code>npm install -g functionbin</code></pre>

<p>
  This will install an executable called <strong>fbin</strong> on your system. Here's an example
  usage:
</p>

<pre><code>fbin -o fbin.js function1,function2</code></pre>

<p>
  As you probably predicted, this will download the code for the three specified functions to a file
  called fbin.js (The default if you don't specify the <code>-o</code> option is dependencies.js).
</p>

<h3>Node.js</h3>

<p>
  By default, the JavaScript downloaded will be in a format suitable for Node projects; i.e.:
</p>

<%= readonly_code_mirror(:node_format, render(:partial => 'partials/node_format_example.js')) %>

<h3>Browsers</h3>

<p>You can opt for a browser-style format instead by specifying the <code>-f</code> option:</p>

<pre><code>fbin -f browser function1,function2</code></pre>

<p>
  You could also, <em>for experimentation only</em>, simply add a <code>&lt;script&gt;</code> tag to
  your page with a URL specifying the functions you want, like so:
</p>

<%= readonly_code_mirror(:browser_format, render(:partial => 'partials/script_tag_example.html'), :'data-mode' => 'htmlmixed') %>
